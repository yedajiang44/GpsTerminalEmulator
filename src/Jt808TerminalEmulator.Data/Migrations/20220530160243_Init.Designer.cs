// <auto-generated />
using System;
using Jt808TerminalEmulator;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jt808TerminalEmulator.Data.Migrations
{
    [DbContext(typeof(EmulatorDbContext))]
    [Migration("20220530160243_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jt808TerminalEmulator.Data.Entity.LineEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Line", (string)null);
                });

            modelBuilder.Entity("Jt808TerminalEmulator.Data.Entity.LocationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("LineId")
                        .HasColumnType("character varying(36)");

                    b.Property<double>("Logintude")
                        .HasColumnType("double precision");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("Jt808TerminalEmulator.Data.Entity.TaskEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LineId")
                        .IsRequired()
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<double>("Speed")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("Jt808TerminalEmulator.Data.Entity.TerminalEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("text");

                    b.Property<string>("Sim")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Terminal", (string)null);
                });

            modelBuilder.Entity("TaskEntityTerminalEntity", b =>
                {
                    b.Property<string>("TasksId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("TerminalsId")
                        .HasColumnType("character varying(36)");

                    b.HasKey("TasksId", "TerminalsId");

                    b.HasIndex("TerminalsId");

                    b.ToTable("TaskTerminals", (string)null);
                });

            modelBuilder.Entity("Jt808TerminalEmulator.Data.Entity.LocationEntity", b =>
                {
                    b.HasOne("Jt808TerminalEmulator.Data.Entity.LineEntity", "Line")
                        .WithMany("Locations")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Jt808TerminalEmulator.Data.Entity.TaskEntity", b =>
                {
                    b.HasOne("Jt808TerminalEmulator.Data.Entity.LineEntity", "Line")
                        .WithMany("Tasks")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("TaskEntityTerminalEntity", b =>
                {
                    b.HasOne("Jt808TerminalEmulator.Data.Entity.TaskEntity", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jt808TerminalEmulator.Data.Entity.TerminalEntity", null)
                        .WithMany()
                        .HasForeignKey("TerminalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jt808TerminalEmulator.Data.Entity.LineEntity", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
